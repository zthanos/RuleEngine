//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Rules.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
#pragma warning disable CS3021 // Type or member does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute
public partial class RulesParser : Parser {
#pragma warning restore CS3021 // Type or member does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute
    protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, DATE=41, ID=42, NUMBER=43, STRING=44, NEWLINE=45, 
		COMMENT=46, TAB=47, WS=48;
	public const int
		RULE_ruleFile = 0, RULE_prog = 1, RULE_ruleName = 2, RULE_appliesTo = 3, 
		RULE_when = 4, RULE_then = 5, RULE_conditionBlock = 6, RULE_conditions = 7, 
		RULE_logicalExpression = 8, RULE_expression = 9, RULE_basicCondition = 10, 
		RULE_value = 11, RULE_unaryOperator = 12, RULE_logicalOperator = 13, RULE_actions = 14, 
		RULE_action = 15, RULE_mathExpression = 16, RULE_term = 17, RULE_actionText = 18, 
		RULE_comparator = 19, RULE_mathoperators = 20;
	public static readonly string[] ruleNames = {
		"ruleFile", "prog", "ruleName", "appliesTo", "when", "then", "conditionBlock", 
		"conditions", "logicalExpression", "expression", "basicCondition", "value", 
		"unaryOperator", "logicalOperator", "actions", "action", "mathExpression", 
		"term", "actionText", "comparator", "mathoperators"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Rule Name:'", "'Applies to:'", "'When:'", "'Then:'", "'('", "')'", 
		"'>='", "'GreaterThanOrEquals'", "'Greater Than Or Equals'", "'<='", "'LessThanOrEquals'", 
		"'Less Than Or Equals'", "'<'", "'LessThan'", "'Less Than'", "'>'", "'GreaterThan'", 
		"'Greater Than'", "'=='", "'Equals'", "'!='", "'NotEquals'", "'Not Equals'", 
		"'isNotNull'", "'is not Null'", "'is null'", "'isNull'", "'notEmpty'", 
		"'not Empty'", "'Empty'", "'and'", "'or'", "'&'", "'|'", "'Set'", "'to'", 
		"'*'", "'/'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "DATE", "ID", "NUMBER", "STRING", "NEWLINE", 
		"COMMENT", "TAB", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RulesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RulesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RulesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RuleFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext[] prog() {
			return GetRuleContexts<ProgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog(int i) {
			return GetRuleContext<ProgContext>(i);
		}
		public RuleFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleFileContext ruleFile() {
		RuleFileContext _localctx = new RuleFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_ruleFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 42;
				prog();
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleNameContext ruleName() {
			return GetRuleContext<RuleNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AppliesToContext appliesTo() {
			return GetRuleContext<AppliesToContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenContext when() {
			return GetRuleContext<WhenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenContext then() {
			return GetRuleContext<ThenContext>(0);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 2, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ruleName();
			State = 48;
			appliesTo();
			State = 49;
			when();
			State = 50;
			then();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RulesParser.STRING, 0); }
		public RuleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleNameContext ruleName() {
		RuleNameContext _localctx = new RuleNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_ruleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(T__0);
			State = 53;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppliesToContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RulesParser.STRING, 0); }
		public AppliesToContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appliesTo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppliesTo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppliesToContext appliesTo() {
		AppliesToContext _localctx = new AppliesToContext(Context, State);
		EnterRule(_localctx, 6, RULE_appliesTo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(T__1);
			State = 56;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionBlockContext[] conditionBlock() {
			return GetRuleContexts<ConditionBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionBlockContext conditionBlock(int i) {
			return GetRuleContext<ConditionBlockContext>(i);
		}
		public WhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenContext when() {
		WhenContext _localctx = new WhenContext(Context, State);
		EnterRule(_localctx, 8, RULE_when);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			Match(T__2);
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAB) {
				{
				{
				State = 59;
				conditionBlock();
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionsContext actions() {
			return GetRuleContext<ActionsContext>(0);
		}
		public ThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_then; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThenContext then() {
		ThenContext _localctx = new ThenContext(Context, State);
		EnterRule(_localctx, 10, RULE_then);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(T__3);
			State = 66;
			actions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAB() { return GetTokens(RulesParser.TAB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB(int i) {
			return GetToken(RulesParser.TAB, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExpressionContext[] logicalExpression() {
			return GetRuleContexts<LogicalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExpressionContext logicalExpression(int i) {
			return GetRuleContext<LogicalExpressionContext>(i);
		}
		public ConditionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionBlockContext conditionBlock() {
		ConditionBlockContext _localctx = new ConditionBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_conditionBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 68;
					Match(TAB);
					State = 69;
					logicalExpression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 72;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		public ConditionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionsContext conditions() {
		ConditionsContext _localctx = new ConditionsContext(Context, State);
		EnterRule(_localctx, 14, RULE_conditions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			logicalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext[] logicalOperator() {
			return GetRuleContexts<LogicalOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator(int i) {
			return GetRuleContext<LogicalOperatorContext>(i);
		}
		public LogicalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExpressionContext logicalExpression() {
		LogicalExpressionContext _localctx = new LogicalExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_logicalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			expression();
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32212254720L) != 0)) {
				{
				{
				State = 77;
				logicalOperator();
				State = 78;
				expression();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicConditionContext basicCondition() {
			return GetRuleContext<BasicConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_expression);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 85;
				basicCondition();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				Match(T__4);
				State = 87;
				logicalExpression();
				State = 88;
				Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RulesParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComparatorContext comparator() {
			return GetRuleContext<ComparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		public BasicConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicConditionContext basicCondition() {
		BasicConditionContext _localctx = new BasicConditionContext(Context, State);
		EnterRule(_localctx, 20, RULE_basicCondition);
		int _la;
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				Match(ID);
				State = 93;
				comparator();
				State = 94;
				value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				Match(ID);
				State = 97;
				unaryOperator();
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32985348833280L) != 0)) {
					{
					State = 98;
					value();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(RulesParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RulesParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RulesParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RulesParser.STRING, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32985348833280L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 24, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2147483520L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorContext : ParserRuleContext {
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 26, RULE_logicalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32212254720L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext[] action() {
			return GetRuleContexts<ActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		public ActionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionsContext actions() {
		ActionsContext _localctx = new ActionsContext(Context, State);
		EnterRule(_localctx, 28, RULE_actions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 109;
				action();
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__34 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RulesParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 30, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(T__34);
			State = 115;
			Match(ID);
			State = 116;
			Match(T__35);
			State = 117;
			mathExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathoperatorsContext[] mathoperators() {
			return GetRuleContexts<MathoperatorsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathoperatorsContext mathoperators(int i) {
			return GetRuleContext<MathoperatorsContext>(i);
		}
		public MathExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathExpressionContext mathExpression() {
		MathExpressionContext _localctx = new MathExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_mathExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			term();
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2061584302080L) != 0)) {
				{
				{
				State = 120;
				mathoperators();
				State = 121;
				term();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RulesParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RulesParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathExpressionContext mathExpression() {
			return GetRuleContext<MathExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionTextContext actionText() {
			return GetRuleContext<ActionTextContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 34, RULE_term);
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128;
				Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 130;
				Match(T__4);
				State = 131;
				mathExpression();
				State = 132;
				Match(T__5);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 134;
				actionText();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RulesParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RulesParser.NUMBER, 0); }
		public ActionTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionTextContext actionText() {
		ActionTextContext _localctx = new ActionTextContext(Context, State);
		EnterRule(_localctx, 36, RULE_actionText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			_la = TokenStream.LA(1);
			if ( !(_la==ID || _la==NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparatorContext : ParserRuleContext {
		public ComparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparatorContext comparator() {
		ComparatorContext _localctx = new ComparatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_comparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2696320L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathoperatorsContext : ParserRuleContext {
		public MathoperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathoperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathoperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathoperatorsContext mathoperators() {
		MathoperatorsContext _localctx = new MathoperatorsContext(Context, State);
		EnterRule(_localctx, 40, RULE_mathoperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2061584302080L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,48,144,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,4,0,44,
		8,0,11,0,12,0,45,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,5,
		4,61,8,4,10,4,12,4,64,9,4,1,5,1,5,1,5,1,6,1,6,4,6,71,8,6,11,6,12,6,72,
		1,7,1,7,1,8,1,8,1,8,1,8,5,8,81,8,8,10,8,12,8,84,9,8,1,9,1,9,1,9,1,9,1,
		9,3,9,91,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,100,8,10,3,10,102,
		8,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,4,14,111,8,14,11,14,12,14,112,
		1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,5,16,124,8,16,10,16,12,16,
		127,9,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,136,8,17,1,18,1,18,1,
		19,1,19,1,20,1,20,1,20,0,0,21,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,0,6,1,0,41,44,1,0,7,30,1,0,31,34,1,0,42,43,6,0,7,7,10,
		10,13,13,16,16,19,19,21,21,1,0,37,40,134,0,43,1,0,0,0,2,47,1,0,0,0,4,52,
		1,0,0,0,6,55,1,0,0,0,8,58,1,0,0,0,10,65,1,0,0,0,12,70,1,0,0,0,14,74,1,
		0,0,0,16,76,1,0,0,0,18,90,1,0,0,0,20,101,1,0,0,0,22,103,1,0,0,0,24,105,
		1,0,0,0,26,107,1,0,0,0,28,110,1,0,0,0,30,114,1,0,0,0,32,119,1,0,0,0,34,
		135,1,0,0,0,36,137,1,0,0,0,38,139,1,0,0,0,40,141,1,0,0,0,42,44,3,2,1,0,
		43,42,1,0,0,0,44,45,1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,1,1,0,0,0,47,
		48,3,4,2,0,48,49,3,6,3,0,49,50,3,8,4,0,50,51,3,10,5,0,51,3,1,0,0,0,52,
		53,5,1,0,0,53,54,5,44,0,0,54,5,1,0,0,0,55,56,5,2,0,0,56,57,5,44,0,0,57,
		7,1,0,0,0,58,62,5,3,0,0,59,61,3,12,6,0,60,59,1,0,0,0,61,64,1,0,0,0,62,
		60,1,0,0,0,62,63,1,0,0,0,63,9,1,0,0,0,64,62,1,0,0,0,65,66,5,4,0,0,66,67,
		3,28,14,0,67,11,1,0,0,0,68,69,5,47,0,0,69,71,3,16,8,0,70,68,1,0,0,0,71,
		72,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,13,1,0,0,0,74,75,3,16,8,0,75,
		15,1,0,0,0,76,82,3,18,9,0,77,78,3,26,13,0,78,79,3,18,9,0,79,81,1,0,0,0,
		80,77,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,17,1,0,0,0,
		84,82,1,0,0,0,85,91,3,20,10,0,86,87,5,5,0,0,87,88,3,16,8,0,88,89,5,6,0,
		0,89,91,1,0,0,0,90,85,1,0,0,0,90,86,1,0,0,0,91,19,1,0,0,0,92,93,5,42,0,
		0,93,94,3,38,19,0,94,95,3,22,11,0,95,102,1,0,0,0,96,97,5,42,0,0,97,99,
		3,24,12,0,98,100,3,22,11,0,99,98,1,0,0,0,99,100,1,0,0,0,100,102,1,0,0,
		0,101,92,1,0,0,0,101,96,1,0,0,0,102,21,1,0,0,0,103,104,7,0,0,0,104,23,
		1,0,0,0,105,106,7,1,0,0,106,25,1,0,0,0,107,108,7,2,0,0,108,27,1,0,0,0,
		109,111,3,30,15,0,110,109,1,0,0,0,111,112,1,0,0,0,112,110,1,0,0,0,112,
		113,1,0,0,0,113,29,1,0,0,0,114,115,5,35,0,0,115,116,5,42,0,0,116,117,5,
		36,0,0,117,118,3,32,16,0,118,31,1,0,0,0,119,125,3,34,17,0,120,121,3,40,
		20,0,121,122,3,34,17,0,122,124,1,0,0,0,123,120,1,0,0,0,124,127,1,0,0,0,
		125,123,1,0,0,0,125,126,1,0,0,0,126,33,1,0,0,0,127,125,1,0,0,0,128,136,
		5,42,0,0,129,136,5,43,0,0,130,131,5,5,0,0,131,132,3,32,16,0,132,133,5,
		6,0,0,133,136,1,0,0,0,134,136,3,36,18,0,135,128,1,0,0,0,135,129,1,0,0,
		0,135,130,1,0,0,0,135,134,1,0,0,0,136,35,1,0,0,0,137,138,7,3,0,0,138,37,
		1,0,0,0,139,140,7,4,0,0,140,39,1,0,0,0,141,142,7,5,0,0,142,41,1,0,0,0,
		10,45,62,72,82,90,99,101,112,125,135
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
